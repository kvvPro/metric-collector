// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: exchange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricServer_PushMetrics_FullMethodName = "/exchange.MetricServer/PushMetrics"
)

// MetricServerClient is the client API for MetricServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServerClient interface {
	PushMetrics(ctx context.Context, in *PushMetricsRequest, opts ...grpc.CallOption) (*PushMetricsResponse, error)
}

type metricServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServerClient(cc grpc.ClientConnInterface) MetricServerClient {
	return &metricServerClient{cc}
}

func (c *metricServerClient) PushMetrics(ctx context.Context, in *PushMetricsRequest, opts ...grpc.CallOption) (*PushMetricsResponse, error) {
	out := new(PushMetricsResponse)
	err := c.cc.Invoke(ctx, MetricServer_PushMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServerServer is the server API for MetricServer service.
// All implementations must embed UnimplementedMetricServerServer
// for forward compatibility
type MetricServerServer interface {
	PushMetrics(context.Context, *PushMetricsRequest) (*PushMetricsResponse, error)
	mustEmbedUnimplementedMetricServerServer()
}

// UnimplementedMetricServerServer must be embedded to have forward compatible implementations.
type UnimplementedMetricServerServer struct {
}

func (UnimplementedMetricServerServer) PushMetrics(context.Context, *PushMetricsRequest) (*PushMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMetrics not implemented")
}
func (UnimplementedMetricServerServer) mustEmbedUnimplementedMetricServerServer() {}

// UnsafeMetricServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServerServer will
// result in compilation errors.
type UnsafeMetricServerServer interface {
	mustEmbedUnimplementedMetricServerServer()
}

func RegisterMetricServerServer(s grpc.ServiceRegistrar, srv MetricServerServer) {
	s.RegisterService(&MetricServer_ServiceDesc, srv)
}

func _MetricServer_PushMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServerServer).PushMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricServer_PushMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServerServer).PushMetrics(ctx, req.(*PushMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricServer_ServiceDesc is the grpc.ServiceDesc for MetricServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.MetricServer",
	HandlerType: (*MetricServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMetrics",
			Handler:    _MetricServer_PushMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
